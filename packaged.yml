AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::ServerlessRepo::Application:
    Name: aws-lambda-power-tuning
    Description: AWS Lambda Power Tuning is an open-source tool that can help you
      visualize and fine-tune the memory/power configuration of Lambda functions.
      It runs in your AWS account - powered by AWS Step Functions - and it supports
      multiple optimization strategies.
    Author: Alex Casalboni
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://lambda-perf-tuning-test/e3fc50a88d0a364313df4b21ef20c29e
    ReadmeUrl: s3://lambda-perf-tuning-test/b0f97c1fa4cd3fa119d3cf36936a9b33
    Labels:
    - lambda
    - power
    - state-machine
    - step-functions
    - optimization
    HomePageUrl: https://github.com/alexcasalboni/aws-lambda-power-tuning
    SemanticVersion: 3.4.2
    SourceCodeUrl: https://github.com/alexcasalboni/aws-lambda-power-tuning
Parameters:
  PowerValues:
    Type: List<Number>
    Default: 128,256,512,1024,1536,3008
    Description: Default RAM values, used only if not provided as execution input
      (comma-separated).
  visualizationURL:
    Type: String
    Default: https://lambda-power-tuning.show/
    Description: Stats visualization URL
  lambdaResource:
    Type: String
    Default: '*'
    Description: AWS Lambda resource (or prefix) to be used for IAM policies
  totalExecutionTimeout:
    Type: Number
    Default: 300
    MinValue: 10
    MaxValue: 900
    Description: Maximum invocation timeout (in seconds) for the Executor step, after
      which you get a States.Timeout error
  permissionsBoundary:
    Type: String
    Default: ''
    Description: The ARN of a permissions boundary to use for all functions' execution
      role.
Conditions:
  UsePermissionsBoundary:
    Fn::Not:
    - Fn::Equals:
      - Ref: permissionsBoundary
      - ''
Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout:
      Ref: totalExecutionTimeout
    PermissionsBoundary:
      Fn::If:
      - UsePermissionsBoundary
      - Ref: permissionsBoundary
      - Ref: AWS::NoValue
    Environment:
      Variables:
        defaultPowerValues:
          Fn::Join:
          - ','
          - Ref: PowerValues
        minRAM: '128'
        baseCosts: '{"ap-east-1":2.9e-9,"af-south-1":2.8e-9,"me-south-1":2.6e-9,"eu-south-1":2.4e-9,"default":2.1e-9}'
        sfCosts: '{"default": 0.000025,"us-gov-west-1": 0.00003,"ap-northeast-2":
          0.0000271,"eu-south-1": 0.00002625,"af-south-1": 0.00002975,"us-west-1":
          0.0000279,"eu-west-3": 0.0000297,"ap-east-1": 0.0000275,"me-south-1": 0.0000275,"ap-south-1":
          0.0000285,"us-gov-east-1": 0.00003,"sa-east-1": 0.0000375}'
        visualizationURL:
          Ref: visualizationURL
Resources:
  initializer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://lambda-perf-tuning-test/b4c41c9dd5bba0200e650817ee8328b4
      Handler: initializer.handler
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:GetAlias
          - lambda:GetFunctionConfiguration
          - lambda:PublishVersion
          - lambda:UpdateFunctionConfiguration
          - lambda:CreateAlias
          - lambda:UpdateAlias
          Resource:
            Ref: lambdaResource
  executor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://lambda-perf-tuning-test/b4c41c9dd5bba0200e650817ee8328b4
      Handler: executor.handler
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
            Ref: lambdaResource
  cleaner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://lambda-perf-tuning-test/b4c41c9dd5bba0200e650817ee8328b4
      Handler: cleaner.handler
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:GetAlias
          - lambda:DeleteAlias
          - lambda:DeleteFunction
          Resource:
            Ref: lambdaResource
  analyzer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://lambda-perf-tuning-test/b4c41c9dd5bba0200e650817ee8328b4
      Handler: analyzer.handler
      Timeout: 10
      Policies:
      - AWSLambdaExecute
  optimizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://lambda-perf-tuning-test/b4c41c9dd5bba0200e650817ee8328b4
      Handler: optimizer.handler
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:GetAlias
          - lambda:PublishVersion
          - lambda:UpdateFunctionConfiguration
          - lambda:CreateAlias
          - lambda:UpdateAlias
          Resource:
            Ref: lambdaResource
  statemachineRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
        - UsePermissionsBoundary
        - Ref: permissionsBoundary
        - Ref: AWS::NoValue
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
  powerTuningStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
        - statemachineRole
        - Arn
      DefinitionString:
        Fn::Sub:
        - ' { "Comment": "AWS Lambda Power Tuning state machine", "StartAt": "Initializer",
          "States": { "Initializer": { "Type": "Task", "Resource": "${initializerArn}",
          "Next": "Branching", "ResultPath": "$.powerValues", "TimeoutSeconds": ${totalExecutionTimeout},
          "Catch": [{ "ErrorEquals": [ "States.ALL" ], "Next": "CleanUpOnError", "ResultPath":
          "$.error" }] }, "Branching": { "Type": "Map", "Next": "Cleaner", "ItemsPath":
          "$.powerValues", "ResultPath": "$.stats", "Parameters": { "input.$": "$",
          "value.$": "$$.Map.Item.Value" }, "MaxConcurrency": 0, "Catch": [{ "ErrorEquals":
          ["States.ALL"], "Next": "CleanUpOnError", "ResultPath": "$.error" }], "Iterator":
          { "StartAt": "Executor", "States": { "Executor": { "Type": "Task", "Resource":
          "${executorArn}", "End": true, "TimeoutSeconds": ${totalExecutionTimeout},
          "Retry": [{ "ErrorEquals": ["States.ALL"], "IntervalSeconds": 3, "MaxAttempts":
          2 }] } } } }, "Cleaner": { "Type": "Task", "Next": "Analyzer", "ResultPath":
          null, "TimeoutSeconds": ${totalExecutionTimeout}, "Resource": "${cleanerArn}"
          }, "Analyzer": { "Type": "Task", "Resource": "${analyzerArn}", "ResultPath":
          "$.analysis", "TimeoutSeconds": 10, "Next": "Optimizer" }, "Optimizer":
          { "Type": "Task", "Resource": "${optimizerArn}", "ResultPath": null, "OutputPath":
          "$.analysis", "TimeoutSeconds": ${totalExecutionTimeout}, "End": true },
          "CleanUpOnError": { "Type": "Task", "ResultPath": null, "OutputPath": null,
          "Resource": "${cleanerArn}", "TimeoutSeconds": ${totalExecutionTimeout},
          "End": true } } }'
        - initializerArn:
            Fn::GetAtt:
            - initializer
            - Arn
          executorArn:
            Fn::GetAtt:
            - executor
            - Arn
          cleanerArn:
            Fn::GetAtt:
            - cleaner
            - Arn
          analyzerArn:
            Fn::GetAtt:
            - analyzer
            - Arn
          optimizerArn:
            Fn::GetAtt:
            - optimizer
            - Arn
          totalExecutionTimeout:
            Ref: totalExecutionTimeout
Outputs:
  StateMachineARN:
    Value:
      Ref: powerTuningStateMachine
